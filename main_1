#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include "stm32f4xx.h"

#define RS 0x20     /* PB5 mask for reg select */
#define RW 0x40     /* PB6 mask for read/write */
#define EN 0x80     /* PB7 mask for enable */

void delayMs(int n);
void LCD_command(unsigned char command);
void LCD_data(char data);
void LCD_init(void);
void PORTS_init(void);
void displayMessage(char* message);

char board[3][3];

void initializeBoard() {
    int i, j;
    for (i = 0; i < 3; i++) {
        for (j = 0; j < 3; j++) {
            board[i][j] = '-';
        }
    }
}

void displayBoard() {
    int i, j;
    printf("   0 1 2\n");
    for (i = 0; i < 3; i++) {
        printf("%d ", i);
        for (j = 0; j < 3; j++) {
            printf(" %c", board[i][j]);
        }
        printf("\n");
    }
}

int checkWin(char mark) {
    int i;
    for (i = 0; i < 3; i++) {
        if (board[i][0] == mark && board[i][1] == mark && board[i][2] == mark)
            return 1;
        if (board[0][i] == mark && board[1][i] == mark && board[2][i] == mark)
            return 1;
    }
    if ((board[0][0] == mark && board[1][1] == mark && board[2][2] == mark) ||
        (board[0][2] == mark && board[1][1] == mark && board[2][0] == mark))
        return 1;
    return 0;
}

int checkDraw() {
    int i, j;
    for (i = 0; i < 3; i++) {
        for (j = 0; j < 3; j++) {
            if (board[i][j] == '-')
                return 0;
        }
    }
    return 1;
}

void LCD_init(void) {
    PORTS_init();

    delayMs(30);            /* initialization sequence */
    LCD_command(0x30);
    delayMs(10);
    LCD_command(0x30);
    delayMs(1);
    LCD_command(0x30);

    LCD_command(0x38);      /* set 8-bit data, 2-line, 5x7 font */
    LCD_command(0x06);      /* move cursor right after each char */
    LCD_command(0x01);      /* clear screen, move cursor to home */
    LCD_command(0x0F);      /* turn on display, cursor blinking */
}

void PORTS_init(void) {
    RCC->AHB1ENR |= 0x06;          /* enable GPIOB/C clock */

    /* PB5 for LCD R/S */
    /* PB6 for LCD R/W */
    /* PB7 for LCD EN */
    GPIOB->MODER &= ~0x0000FC00;    /* clear pin mode */
    GPIOB->MODER |= 0x00005400;    /* set pin output mode */
    GPIOB->BSRR = 0x00C00000;       /* turn off EN and R/W */

    /* PC0-PC7 for LCD D0-D7, respectively. */
    GPIOC->MODER &= ~0x0000FFFF;    /* clear pin mode */
    GPIOC->MODER |= 0x00005555;    /* set pin output mode */
}

void LCD_command(unsigned char command) {
    GPIOB->BSRR = (RS | RW) << 16;  /* RS = 0, R/W = 0 */
    GPIOC->ODR = command;           /* put command on data bus */
    GPIOB->BSRR = EN;               /* pulse E high */
    delayMs(0);
    GPIOB->BSRR = EN << 16;         /* clear E */

    if (command < 4)
        delayMs(2);                 /* command 1 and 2 needs up to 1.64ms */
    else
        delayMs(1);                 /* all others 40 us */
}

void LCD_data(char data) {
    GPIOB->BSRR = RS;               /* RS = 1 */
    GPIOB->BSRR = RW << 16;         /* R/W = 0 */
    GPIOC->ODR = data;              /* put data on data bus */
    GPIOB->BSRR = EN;               /* pulse E high */
    delayMs(0);
    GPIOB->BSRR = EN << 16;         /* clear E */

    delayMs(1);
}

/* delay n milliseconds (16 MHz CPU clock) */
void delayMs(int n) {
    int i;
    for (; n > 0; n--)
        for (i = 0; i < 3195; i++) ;
}

void displayMessage(char* message) {
    LCD_command(1);  /* clear LCD display */
    delayMs(500);

    while (*message) {
        LCD_data(*message++);
    }

    delayMs(1000);
    LCD_command(1);  /* clear LCD display */
    delayMs(500);
}

void UART2_Init(void) {
    RCC->APB1ENR |= 0x20000;  // Enable UART2 clock
    RCC->AHB1ENR |= 0x01;     // Enable GPIOA clock

    // Configure PA2 and PA3 for UART2
    GPIOA->MODER &= ~0x00F0;
    GPIOA->MODER |= 0x00A0;   // PA2, PA3 to alternate function
    GPIOA->AFR[0] &= ~0xFF00;
    GPIOA->AFR[0] |= 0x7700;  // PA2, PA3 to AF7 (UART2)

    USART2->BRR = 0x0683;     // 9600 baud rate @ 16 MHz
    USART2->CR1 = 0x0008;     // Enable Tx
    USART2->CR1 |= 0x2000;    // Enable UART
}

void UART2_Write(int ch) {
    while (!(USART2->SR & USART_SR_TXE)) {} // Wait for TX buffer empty
    USART2->DR = (ch & 0xFF);
}

int UART2_Read(void) {
    while (!(USART2->SR & USART_SR_RXNE)) {} // Wait for RX buffer not empty
    return USART2->DR;
}

int fputc(int ch, FILE *f) {
    UART2_Write(ch);
    return ch;
}

int fgetc(FILE *f) {
    return UART2_Read();
}

int main(void) {
    SystemInit();
    UART2_Init();
    LCD_init();

    int x, y;
    char userMark, computerMark;
    srand(time(NULL));

    printf("Choose your mark (X or O): ");
    scanf(" %c", &userMark);

    if (userMark == 'X' || userMark == 'x') {
        computerMark = 'O';
    } else {
        computerMark = 'X';
    }

    initializeBoard();

    while (1) {
        displayBoard();

        // User's turn
        printf("Enter row and column (0-2) for your move: ");
        scanf("%d %d", &x, &y);
        if (board[x][y] != '-') {
            printf("Invalid move. Try again.\n");
            continue;
        }
        board[x][y] = userMark;

        if (checkWin(userMark)) {
            displayBoard();
            printf("You win!\n");
            displayMessage("user");
            break;
        }

        if (checkDraw()) {
            displayBoard();
            printf("It's a draw!\n");
            displayMessage("draw");
            break;
        }

        // Computer's turn
        do {
            x = rand() % 3;
            y = rand() % 3;
        } while (board[x][y] != '-');
        board[x][y] = computerMark;

        if (checkWin(computerMark)) {
            displayBoard();
            printf("Computer wins!\n");
            displayMessage("comp");
            break;
        }

        if (checkDraw()) {
            displayBoard();
            printf("It's a draw!\n");
            displayMessage("draw");
            break;
        }
    }

    return 0;
}
